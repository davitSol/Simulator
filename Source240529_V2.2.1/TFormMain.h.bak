//---------------------------------------------------------------------------

#ifndef TFormMainH
#define TFormMainH
//---------------------------------------------------------------------------
#include <Classes.hpp>
#include <Controls.hpp>
#include <StdCtrls.hpp>
#include <Forms.hpp>
#include "CPort.hpp"
#include "te_controls.hpp"
#include "TntComCtrls.hpp"
#include "TntStdCtrls.hpp"
#include <ComCtrls.hpp>
#include "Protocol.h"
#include "TFormMessage.h"
#include "TFormComPort.h"
#include <IdAntiFreeze.hpp>
#include <IdAntiFreezeBase.hpp>
#include <IdBaseComponent.hpp>
#include <IdComponent.hpp>
#include <IdDNSResolver.hpp>
#include <IdIcmpClient.hpp>
#include <IdRawBase.hpp>
#include <IdRawClient.hpp>
#include <IdUDPBase.hpp>
#include <IdUDPClient.hpp>
#include <ScktComp.hpp>
#include <ExtCtrls.hpp>
#include <Menus.hpp>
#include "TntButtons.hpp"
#include "TntExtCtrls.hpp"
#include <Buttons.hpp>
#include <IdUDPServer.hpp>
//---------------------------------------------------------------------------
class TFormMain : public TForm
{
__published:	// IDE-managed Components
        TTeButton *BitBtnExit;
        TComPort *ComPort1;
        TIdDNSResolver *IdDNSResolver;
        TIdIcmpClient *IdIcmpClient1;
        TClientSocket *ClientSocket1;
        TIdAntiFreeze *IdAntiFreeze1;
        TTntPageControl *pcMessage;
        TTntTabSheet *tsEnv;
        TTntLabel *Label1;
        TTntLabel *Label2;
        TTntLabel *Label3;
        TTntLabel *Label4;
        TTntLabel *Label5;
        TTntLabel *Label6;
        TTntLabel *Label7;
        TTntLabel *Label8;
        TTntLabel *Label9;
        TTntLabel *Label10;
        TTntLabel *Label11;
        TTntLabel *Label12;
        TTntLabel *Label14;
        TTntLabel *Label16;
        TTntLabel *Label17;
        TTntLabel *Label18;
        TTntLabel *Label23;
        TTntLabel *Label24;
        TTntLabel *Label13;
        TTntLabel *Label15;
        TTntLabel *Label19;
        TTeComboBox *cbPageNo;
        TTeGroupBox *rbTextNo;
        TTeRadioButton *rbNo1;
        TTeRadioButton *rbNo2;
        TTeRadioButton *rbNo3;
        TTeComboBox *cbStartYPos;
        TTeComboBox *cbStartXPos;
        TTeComboBox *cbSpeed;
        TTeComboBox *cbLasEffect;
        TTeComboBox *cbLasDirect;
        TTeComboBox *cbFontSize;
        TTeComboBox *cbEntEffect;
        TTeComboBox *cbEntDirect;
        TTeComboBox *cbEndYPos;
        TTeComboBox *cbEndXPos;
        TTeComboBox *cbDispType;
        TTeComboBox *cbDispControl;
        TTeComboBox *cbDelay;
        TTeComboBox *cbCodeKind;
        TTeComboBox *cbBGImage;
        TTeComboBox *cbAssistEffect;
        TTntEdit *eColor;
        TTntEdit *eBGColor;
        TTntCheckBox *cbRevRefeat;
        TTntRichEdit *eData;
        TTntTabSheet *tsNomarl;
        TTntLabel *TeLabel9;
        TTntLabel *TeLabel8;
        TTntLabel *TeLabel7;
        TTntLabel *TeLabel6;
        TTntLabel *TeLabel5;
        TTntLabel *TeLabel4;
        TTntLabel *TeLabel3;
        TTntLabel *TeLabel20;
        TTntLabel *TeLabel19;
        TTntLabel *TeLabel2;
        TTntLabel *TeLabel21;
        TTntLabel *TeLabel18;
        TTntLabel *TeLabel17;
        TTntLabel *TeLabel16;
        TTntLabel *TeLabel15;
        TTntLabel *TeLabel14;
        TTntLabel *TeLabel13;
        TTntLabel *TeLabel12;
        TTntLabel *TeLabel11;
        TTntLabel *TeLabel10;
        TTntLabel *TeLabel1;
        TTeGroupBox *rbTextNo2;
        TTeRadioButton *rbNo21;
        TTeRadioButton *rbNo22;
        TTeRadioButton *rbNo23;
        TTeComboBox *cbStartYPos2;
        TTeComboBox *cbStartXPos2;
        TTeComboBox *cbSpeed2;
        TTeComboBox *cbPageNo2;
        TTeComboBox *cbLasEffect2;
        TTeComboBox *cbLasDirect2;
        TTeComboBox *cbFontSize2;
        TTeComboBox *cbEntEffect2;
        TTeComboBox *cbEntDirect2;
        TTeComboBox *cbEndYPos2;
        TTeComboBox *cbEndXPos2;
        TTeComboBox *cbDispType2;
        TTeComboBox *cbDispControl2;
        TTeComboBox *cbDelay2;
        TTeComboBox *cbCodeKind2;
        TTeComboBox *cbBGImage2;
        TTeComboBox *cbAssistEffect2;
        TTntEdit *eColor2;
        TTntEdit *eBGColor2;
        TTntRichEdit *eData2;
        TTntTabSheet *tsETC;
        TLabel *Label25;
        TTeGroupBox *gbMemClear;
        TTeButton *BMemClear;
        TTeComboBox *cbMsgMemClear;
        TTeGroupBox *gbMemInput;
        TTeButton *BInput;
        TTeComboBox *cbMsgInput;
        TTeGroupBox *gbBGImage;
        TTeButton *BBGImage;
        TTeComboBox *cbBGISelect;
        TTeGroupBox *gbSync;
        TTeLabel *SLabel1;
        TTeLabel *SLabel2;
        TTeLabel *TeLabel22;
        TTeLabel *TeLabel23;
        TTeComboBox *cbSoundSec1;
        TTeComboBox *cbSoundSec2;
        TTeButton *SendSync;
        TTeButton *BitBtnPowerLEDOn;
        TTeButton *BitBtnPowerLEDOff;
        TTeButton *BitBtnSyncLED;
        TTeButton *BDIBDTime;
        TTeButton *DataSend;
        TPanel *Panel7;
        TRichEdit *RichEditLog;
        TTntPanel *pnLog;
        TTePanel *pnLogButton;
        TTeSpeedButton *sbLogClear;
        TTePanel *ToolbarMain;
        TTeSpeedButton *NComPort;
        TIdUDPClient *IdUDPClient;
        TIdUDPServer *IdUDPServer;
        TTntGroupBox *gbSignSize;
        TTntLabel *TntLabel1;
        TTntLabel *TntLabel3;
        TTntLabel *TntLabel2;
        TTntLabel *TntLabel5;
        TTntLabel *TntLabel6;
        TTntEdit *TntEdit1;
        TTntUpDown *UpDownHeight;
        TTntEdit *TntEdit2;
        TTntUpDown *UpDownWidth;
        TTntComboBox *cbProgramType;
        TTeButton *BtnSignSize;
        void __fastcall FormCreate(TObject *Sender);
        void __fastcall BitBtnExitClick(TObject *Sender);
        void __fastcall ComPort1RxChar(TObject *Sender, int Count);
        void __fastcall FormCloseQuery(TObject *Sender, bool &CanClose);
        void __fastcall IdIcmpClient1Reply(TComponent *ASender,
          const TReplyStatus &AReplyStatus);
        void __fastcall ClientSocket1Connect(TObject *Sender,
          TCustomWinSocket *Socket);
        void __fastcall ClientSocket1Disconnect(TObject *Sender,
          TCustomWinSocket *Socket);
        void __fastcall ClientSocket1Error(TObject *Sender,
          TCustomWinSocket *Socket, TErrorEvent ErrorEvent,
          int &ErrorCode);
        void __fastcall ClientSocket1Read(TObject *Sender,
          TCustomWinSocket *Socket);
        void __fastcall BitBtnSyncLEDClick(TObject *Sender);
        void __fastcall IdUDPClientStatus(TObject *ASender,
          const TIdStatus AStatus, const AnsiString AStatusText);
        void __fastcall IdUDPServerStatus(TObject *ASender,
          const TIdStatus AStatus, const AnsiString AStatusText);
        void __fastcall IdUDPServerUDPRead(TObject *Sender, TStream *AData,
          TIdSocketHandle *ABinding);
        void __fastcall cbEntEffectClick(TObject *Sender);
        void __fastcall cbEntEffectDropDown(TObject *Sender);
        void __fastcall cbEntDirectDropDown(TObject *Sender);
        void __fastcall cbLasEffectClick(TObject *Sender);
        void __fastcall cbLasEffectDropDown(TObject *Sender);
        void __fastcall cbLasDirectDropDown(TObject *Sender);
        void __fastcall cbEntEffect2Click(TObject *Sender);
        void __fastcall cbEntEffect2DropDown(TObject *Sender);
        void __fastcall cbEntDirect2DropDown(TObject *Sender);
        void __fastcall cbLasEffect2Click(TObject *Sender);
        void __fastcall cbLasEffect2DropDown(TObject *Sender);
        void __fastcall cbLasDirect2DropDown(TObject *Sender);
        void __fastcall rbTextNoClick(TObject *Sender);
        void __fastcall rbTextNo2Click(TObject *Sender);
        void __fastcall cbFontSizeClick(TObject *Sender);
        void __fastcall cbFontSize2Click(TObject *Sender);
        void __fastcall rbTextNoRoadClick(TObject *Sender);
        void __fastcall rbTextNoRoad2Click(TObject *Sender);
        void __fastcall BMemClearClick(TObject *Sender);
        void __fastcall SendSyncClick(TObject *Sender);
        void __fastcall tsShow(TObject *Sender);
        void __fastcall BitBtnPowerLEDClick(TObject *Sender);
        void __fastcall DataSendClick(TObject *Sender);
        void __fastcall BtnSignSizeClick(TObject *Sender);
        void __fastcall NComPortClick(TObject *Sender);
        void __fastcall BDIBDTimeClick(TObject *Sender);
        void __fastcall sbLogClearClick(TObject *Sender);
private:	// User declarations
        TFormMessage *FMessage; //메시지 폼
        TFormComPort *FComPort; // 통신설정 폼
        int WaitTime;   //리시브 데이터 대기 시간
        int DelayTime;  //리시브 데이터 수동 대기 시간
        int ServerCommOpenDelay; // TCP/IP 통시시 소켓이 연결 안될때 대기 시간
        bool SchBmpFile; // 리시브 데이터 확인 플래그
        bool DelayRun; // 리시브 데이터 수동 시간 플래그
        bool bCRCFail; // CRC 에러 확인 플래그
        bool bDataFail; // 에러 데이터 확인 플래그
        AnsiString asLogMessage; // 로그 메시지
        AnsiString Status; // 상태 체크
        Response RP; // 리시브 프로토콜 구조체
        AnsiString DNSAddress; // DDNS 실제 IP 주소
        bool DNSConnect; // TCP/IP 소켓 연결 상태
        bool bDisConnect; // TCP/IP 소켓 끊어진 상태
        bool bMsg; // 로그 메시지 보기 플래그
        BYTE FailData; // 리시브 데이터 에러 데이터
        int ProgramType; // 전광판 컬러 종류
        int MessageCount; // 일반문구 최대 갯수
        int ProtocolTabKind; // 긴급/일반/특수 저장 탭
        int ProtocolPageNo2; // 일반문구 저장 페이지
        int ProtocolBlockNo; // 긴급문구 저장 섹션
        int ProtocolBlockNo2; // 일반무구 저장 섹션
        int LogFileCnt; // 로그 파일 저장 카운트
        AnsiString OldLogDate; // 로그 마지막 저장 날짜
        sProtocolData ProtocolData; // 긴급/일반 문구 저장 구조체
        WideString EffectType[EffectTypeCount]; // 효과 종류
        WideString DirType[DirTypeCount]; // 효과 방향
        AnsiString SpeedValue[19]; // 속도
        AnsiString DelayValue[20]; // 정지시간
        void __fastcall SendData(BYTE ComKind, BYTE Add, BYTE *Data, DWORD DataLen, int Number, OPCode OPC); // 전송 함수
        void __fastcall ReadParsing(BYTE ComKind, char Add, BYTE *ParsingData, int ParsingSize); // 파싱 함수
        int __fastcall ReturnDay(TDateTime Time); // 요일 리턴 값 함수
        bool __fastcall CurrenTimeSync(); // PC 현재시간 전송
        void __fastcall ButtonEnabled(bool bEnabled); // 버튼 활성화 함수
public:		// User declarations
        TFormMessage *formMessage; // 메시지 함수 폼
        TIdSocketHandle *SH; // UDP 서버 소켓
        bool bFlagCrcPacket; // CRC 적용 플래그
        AnsiString    PortUse1; // COM 포트 저장
        eBaudRate     BaudRateUse1; // COM BaudRate 저장
        int Controler1; // 전광판 어드레스 저장
        AnsiString    IPAddress; // TCP/IP 저정
        int IPPort; // TCP/IP 포트 저장
        AnsiString    UDPIPAddress; // UDP IP 저장
        int DSPPort; // UDP 전광판 포트 저장
        int SRCPort; // UDP DabitChe 포트 저장
        BYTE ComKind; // 통신 종류 저장
        bool bStopSend; // 전송 정지 플래그
        Language LangFile; // 언어 파일 구조체
        AnsiString BasePath; // 메인 폴더
        AnsiString DestSysPath; // System 폴더
        AnsiString DestLogPath; // Log 폴더
        int ModuleWidth; // 전광판 가로 크기
        int ModuleHeight; // 전광판 세로 크기
        AnsiString asUDPIPAddress; // 전송될 UDP IP
        void __fastcall RoadIniFile(); // 저장된 정보 ini 파일에서 불러오는 함수
        void __fastcall SaveIniFile(); // ini 파일 저장 함수
        void __fastcall RoadLangFile(AnsiString aslang); // 언어파일 불러오는 함수
        void __fastcall InputLang(); // 언어 적용할 함수
        bool __fastcall ModuleData(BYTE ComKind, BYTE Addr, BYTE *Data, DWORD DataLen, int Number, OPCode OPC, bool bMessage); // 전송한 데이터 리시브 데이터 받는 판단 함수
        bool __fastcall ComPortSet(BYTE ComKind, AnsiString PortUse, BYTE BaudRateUse, BYTE DTR, BYTE RTS, AnsiString IPAddress, int IPPort, bool bMessage); // 통신 연결 함수
        bool __fastcall ComClose(BYTE ComKind); // 통신 닫는 함수
        void __fastcall NoneDelayCount(int Cnt); // 딜레이 함수
        void __fastcall LANDelayCount(int Cnt); // 통신 딜레이 함수
        AnsiString __fastcall GetDNS(); // PC DNS 읽어오는 함수
        unsigned short int __fastcall Calc_crc(unsigned char *buf, int numbytes); // CRC 함수
        AnsiString __fastcall Int2HexConvert(BYTE Value); // int 값을 Hex 로 변환 함수
        int __fastcall Hex2IntConvert(AnsiString Value); // Hex 값을 int 로 변환 함수
        int __fastcall Message(WideString Mes, WideString wsYes, WideString wsNo, WideString wsCancel, int Width, int Height, int btnCnt, TColor FontColor); // 메시지 함수
        void __fastcall AddLog(AnsiString Msg, TColor Color); // 로그 표시 함수
        void __fastcall DeleteOldLogFile(AnsiString SitePath); // 오래된 로그 삭제 함수
        int __fastcall FindItemIndex(AnsiString Data, int Col); // 효과,방향 인덱스 리턴 함수
        BYTE __fastcall InputSchEffect(TGEffectType eEff, TGEffectDirection dDirect); // 전광판 효과값 리턴 함수
        BYTE __fastcall SetDelayTime(int DelayTime); // 딜레이갓 리턴 함수
        AnsiString __fastcall GetDay(int iDay); // 현재 요일 리터 함수
        __fastcall TFormMain(TComponent* Owner);
};
//---------------------------------------------------------------------------
extern PACKAGE TFormMain *FormMain;
//---------------------------------------------------------------------------
#endif
